specVersion: 0.0.1
description: Fearless SubQuery project
repository: 'https://github.com/soramitsu/fearless-subquery'
schema: ./schema.graphql
network:
  endpoint: wss://api-kusama.interlay.io/parachain
  types:
    Address: "MultiAddress"
    LookupSource: "MultiAddress"
  typesBundle: {
    {
  "spec": {
    "kintsugi-parachain": {
      "derives": {
        "balances": {}
      },
      "types": [
        {
          "minmax": [
            0,
            100
          ],
          "types": {
            "BalanceWrapper": {
              "currencyId": "CurrencyId",
              "amount": "i128"
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol"
              }
            },
            "FundAccountJsonRpcRequest": {
              "account_id": "AccountId",
              "currency_id": "InterbtcPrimitivesCurrencyId"
            },
            "H256Le": "H256",
            "SignedFixedPoint": "FixedU128",
            "TokenSymbol": {
              "_enum": {
                "DOT": 0,
                "INTERBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "UnsignedFixedPoint": "FixedU128",
            "VaultCurrencyPair": {
              "collateral": "CurrencyId",
              "wrapped": "CurrencyId"
            },
            "VaultId": {
              "account_id": "AccountId",
              "currencies": "VaultCurrencyPair"
            }
          }
        }
      ],
      "rpc": {
        "btcRelay": {
          "verifyBlockHeaderInclusion": {
            "description": "Verify that the block with the given hash is included",
            "params": [
              {
                "name": "block_hash",
                "type": "H256Le"
              }
            ],
            "type": "void"
          }
        },
        "issue": {
          "getIssueRequests": {
            "description": "Get all issue request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultIssueRequests": {
            "description": "Get all issue request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "oracle": {
          "collateralToWrapped": {
            "description": "Collateral to Wrapped exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "wrappedToCollateral": {
            "description": "Wrapped to Collateral exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "redeem": {
          "getRedeemRequests": {
            "description": "Get all redeem request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultRedeemRequests": {
            "description": "Get all redeem request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "refund": {
          "getRefundRequests": {
            "description": "Get all refund request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getRefundRequestsByIssueId": {
            "description": "Get all refund request IDs for a particular issue ID",
            "params": [
              {
                "name": "issue_id",
                "type": "H256"
              }
            ],
            "type": "H256"
          },
          "getVaultRefundRequests": {
            "description": "Get all refund request IDs for a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "relay": {
          "isTransactionInvalid": {
            "description": "Determine if the RawTx is invalid for the specified VaultId",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              },
              {
                "name": "raw_tx",
                "type": "Vec<u8>"
              }
            ],
            "type": "void"
          }
        },
        "replace": {
          "getNewVaultReplaceRequests": {
            "description": "Get all replace request IDs to a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getOldVaultReplaceRequests": {
            "description": "Get all replace request IDs from a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "vaultRegistry": {
          "getCollateralizationFromVault": {
            "description": "Returns the collateralization of a specific vault",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getCollateralizationFromVaultAndCollateral": {
            "description": "Returns the collateralization of a specific vault and collateral",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "collateral",
                "type": "BalanceWrapper"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getIssueableTokensFromVault": {
            "description": "Get the amount of tokens a vault can issue",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getPremiumRedeemVaults": {
            "description": "Get all vaults below the premium redeem threshold.",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getRequiredCollateralForVault": {
            "description": "Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getRequiredCollateralForWrapped": {
            "description": "Get the amount of collateral required to issue an amount of InterBTC",
            "params": [
              {
                "name": "amount_btc",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultCollateral": {
            "description": "Get the vault's collateral (excluding nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultTotalCollateral": {
            "description": "Get the vault's collateral (including nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultsByAccountId": {
            "description": "Get all vaults that are registered using the given account _id",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<VaultId>"
          },
          "getVaultsWithIssuableTokens": {
            "description": "Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getVaultsWithRedeemableTokens": {
            "description": "Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          }
        }
      },
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      },
      "instances": {
        "balances": [
          "ksm",
          "kbtc",
          "kint",
          "dot",
          "interBTC",
          "intr"
        ]
      }
    }
  }
}
  }
dataSources:
  - name: main
    kind: substrate/Runtime
    startBlock: 2500

    # polkadot test slash bloks: 3570179

    # westend test stake block: 6000000
    # kusama test stake block: 8124580
    # polkadot test stake block: 5645004

    # polkadot test rewards block: 5704983
    mapping:
      handlers:
        - handler: handleHistoryElement
          kind: substrate/CallHandler
        - handler: handleTransfer
          kind: substrate/EventHandler
          filter:
            module: balances
            method: Transfer
        - handler: handleTransferKeepAlive
          kind: substrate/EventHandler
          filter:
            module: balances
            method: transfer_keep_alive
