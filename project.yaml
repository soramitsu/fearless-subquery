specVersion: 0.0.1
description: Fearless SubQuery project
repository: 'https://github.com/soramitsu/fearless-subquery'
schema: ./schema.graphql
network:
  endpoint: wss://node.genshiro.io#
  types: {
                "AccountInfo": {
                    "nonce": "Index",
                    "consumers": "RefCount",
                    "providers": "RefCount"
                },
                "Address": "AccountId",
                "Asset": {
                    "0": "AssetIdInnerType"
                },
                "AssetData": {
                    "id": "Asset",
                    "lot": "FixedU128",
                    "price_step": "FixedU128",
                    "maker_fee": "FixedU128",
                    "taker_fee": "FixedU128",
                    "multi_asset": "Option<MultiAsset>",
                    "multi_location": "Option<MultiLocation>",
                    "debt_weight": "DebtWeightType",
                    "buyout_priority": "u64",
                    "asset_type": "AssetType",
                    "is_dex_enabled": "bool",
                    "collateral_enabled": "bool"
                },
                "AssetId": "Asset",
                "AssetIdInnerType": "u64",
                "AssetMetrics": {
                    "period_start": "Duration",
                    "period_end": "Duration",
                    "returns": "Vec<FixedNumber>",
                    "volatility": "FixedNumber",
                    "correlations": "Vec<(Asset, FixedNumber)>"
                },
                "AssetName": "Vec<u8>",
                "AssetType": {
                    "_enum": {
                        "Native": null,
                        "Physical": null,
                        "Synthetic": null,
                        "Lp": "PoolId"
                    }
                },
                "Balance": "u64",
                "BalanceOf": "Balance",
                "BalancesAggregate": {
                    "total_issuance": "Balance",
                    "total_debt": "Balance"
                },
                "BestPrice": {
                    "ask": "Option<FixedI64>",
                    "bid": "Option<FixedI64>"
                },
                "BlockNumber": "u64",
                "CapVec": {
                    "head_index": "u32",
                    "len_cap": "u32",
                    "items": "Vec<FixedNumber>"
                },
                "ChainId": "u8",
                "ChunkKey": "u64",
                "Currency": {
                    "_enum": [
                        "UNKNOWN",
                        "Usd",
                        "Eq",
                        "Eth",
                        "Btc",
                        "Eos",
                        "Dot",
                        "Crv"
                    ]
                },
                "DataPoint": {
                    "price": "u64",
                    "account_id": "AccountId",
                    "block_number": "BlockNumber",
                    "timestamp": "u64"
                },
                "DebtWeightType": "i128",
                "DebtWeightTypeInner": "i128",
                "DepositNonce": "u64",
                "Duration": {
                    "secs": "u64",
                    "nanos": "u32"
                },
                "FinancialMetrics": {
                    "period_start": "Duration",
                    "period_end": "Duration",
                    "assets": "Vec<Asset>",
                    "mean_returns": "Vec<FixedNumber>",
                    "volatilities": "Vec<FixedNumber>",
                    "correlations": "Vec<FixedNumber>",
                    "covariances": "Vec<FixedNumber>"
                },
                "FinancialRecalcPeriodMs": "u64",
                "FixedI64": "i64",
                "FixedNumber": "u128",
                "FixedU128": "u128",
                "Keys": "SessionKeys3",
                "LookupSource": "AccountId",
                "MarginState": {
                    "_enum": {
                        "Good": null,
                        "SubGood": null,
                        "MaintenanceStart": "u64",
                        "MaintenanceIsGoing": "u64",
                        "MaintenanceTimeOver": "u64",
                        "MaintenanceEnd": null,
                        "SubCritical": null
                    }
                },
                "MaxCountOfAssetsRecalcPerBlock": "i32",
                "Number": "FixedU128",
                "OperationRequest": {
                    "account": "AccountId",
                    "authority_index": "AuthIndex",
                    "validators_len": "u32",
                    "block_num": "BlockNumber"
                },
                "OperationRequestDexCorridor": {
                    "asset": "Asset",
                    "order_id": "OrderId",
                    "price": "FixedI64",
                    "authority_index": "AuthIndex",
                    "validators_len": "u32",
                    "block_num": "BlockNumber"
                },
                "OperationRequestDexDeleteOrder": {
                    "asset": "Asset",
                    "order_id": "OrderId",
                    "price": "FixedI64",
                    "who": "AccountId",
                    "buyout": "Option<Balance>",
                    "authority_index": "AuthIndex",
                    "validators_len": "u32",
                    "block_num": "BlockNumber"
                },
                "OperationRequestLiqFm": {
                    "authority_index": "AuthIndex",
                    "validators_len": "u32",
                    "block_num": "BlockNumber"
                },
                "Order": {
                    "order_id": "OrderId",
                    "account_id": "AccountId",
                    "side": "OrderSide",
                    "price": "FixedI64",
                    "amount": "FixedU128",
                    "created_at": "u64",
                    "expiration_time": "u64"
                },
                "OrderType": {
                    "_enum": {
                        "Limit": "FixedI64",
                        "Market": null
                    }
                },
                "OrderId": "u64",
                "OrderSide": {
                    "_enum": [
                        "Buy",
                        "Sell"
                    ]
                },
                "PoolId": "u32",
                "PoolInfo": {
                    "owner": "AccountId",
                    "pool_asset": "AssetId",
                    "assets": "Vec<AssetId>",
                    "amplification": "Number",
                    "fee": "Permill",
                    "admin_fee": "Permill",
                    "balances": "Vec<Balance>",
                    "total_balances": "Vec<Balance>"
                },
                "PoolTokenIndex": "u32",
                "PortfolioMetrics": {
                    "period_start": "Duration",
                    "period_end": "Duration",
                    "z_score": "u32",
                    "volatility": "FixedNumber",
                    "value_at_risk": "FixedNumber"
                },
                "Price": "u128",
                "PriceLog": {
                    "latest_timestamp": "Duration",
                    "prices": "CapVec<Price>"
                },
                "PricePayload": {
                    "public": "[u8; 33]",
                    "asset": "Asset",
                    "price": "FixedI64",
                    "block_number": "BlockNumber"
                },
                "PricePeriod": {
                    "_enum": [
                        "Min",
                        "TenMin",
                        "Hour",
                        "FourHour",
                        "Day"
                    ]
                },
                "PricePoint": {
                    "block_number": "BlockNumber",
                    "timestamp": "u64",
                    "last_fin_recalc_timestamp": "Timestamp",
                    "price": "u64",
                    "data_points": "Vec<DataPoint>"
                },
                "PriceUpdate": {
                    "period_start": "Duration",
                    "time": "Duration",
                    "price": "FixedNumber"
                },
                "ProposalStatus": {
                    "_enum": [
                        "Initiated",
                        "Approved",
                        "Rejected"
                    ]
                },
                "ProposalVotes": {
                    "votes_for": "Vec<AccountId>",
                    "votes_against": "Vec<AccountId>",
                    "status": "ProposalStatus",
                    "expiry": "BlockNumber"
                },
                "ResourceId": "[u8; 32]",
                "Round": {
                    "total_cap": "Balance",
                    "individual_cap": "Balance",
                    "end": "u64",
                    "token": "Asset",
                    "minimal_buy_amount": "Balance",
                    "vesting_params": "VestingParams"
                },
                "SignedBalance": {
                    "_enum": {
                        "Positive": "Balance",
                        "Negative": "Balance"
                    }
                },
                "SubAccType": {
                    "_enum": [
                        "Bailsman",
                        "Borrower",
                        "Lender"
                    ]
                },
                "Timestamp": "u64",
                "TotalAggregates": {
                    "collateral": "Balance",
                    "debt": "Balance"
                },
                "TransferReason": {
                    "_enum": [
                        "Common",
                        "InterestFee",
                        "MarginCall",
                        "LiquidityFarming",
                        "BailsmenRedistribution",
                        "TreasuryEqBuyout",
                        "TreasuryBuyEq",
                        "Subaccount",
                        "Lock",
                        "Unlock",
                        "Claim",
                        "CurveFeeWithdraw",
                        "Reserve",
                        "Unreserve"
                    ]
                },
                "UserGroup": {
                    "_enum": [
                        "Unknown",
                        "Balances",
                        "Bailsmen",
                        "Borrowers",
                        "Lenders"
                    ]
                },
                "UnsignedPriorityPair": "(u64, u64)",
                "VestingInfo": {
                    "locked": "Balance",
                    "perBlock": "Balance",
                    "startingBlock": "BlockNumber"
                },
                "VestingParams": {
                    "blocks_until_beginning": "u64",
                    "amount_of_blocks": "u64"
                }
            }
dataSources:
  - name: main
    kind: substrate/Runtime
    startBlock: 1

    # polkadot test slash bloks: 3570179

    # westend test stake block: 6000000
    # kusama test stake block: 8124580
    # polkadot test stake block: 5645004

    # polkadot test rewards block: 5704983
    mapping:
      handlers:
        - handler: handleHistoryElement
          kind: substrate/CallHandler
        - handler: handleReward
          kind: substrate/EventHandler
          filter:
            module: staking
            method: Reward
        - handler: handleRewarded
          kind: substrate/EventHandler
          filter:
            module: staking
            method: Rewarded
        - handler: handleSlash
          kind: substrate/EventHandler
          filter:
            module: staking
            method: Slash
        - handler: handleSlashed
          kind: substrate/EventHandler
          filter:
            module: staking
            method: Slashed
        - handler: handleBonded
          kind: substrate/EventHandler
          filter:
            module: staking
            method: Bonded
        - handler: handleUnbonded
          kind: substrate/EventHandler
          filter:
            module: staking
            method: Unbonded
        - handler: handleTransfer
          kind: substrate/EventHandler
          filter:
            module: balances
            method: Transfer
        - handler: handleTransferKeepAlive
          kind: substrate/EventHandler
          filter:
            module: balances
            method: transfer_keep_alive
        - handler: handleNewEra
          kind: substrate/EventHandler
          filter:
            module: staking
            method: StakingElection
        - handler: handleStakersElected
          kind: substrate/EventHandler
          filter:
            module: staking
            method: StakersElected
