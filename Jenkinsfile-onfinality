@Library('jenkins-library')

String agentLabel        = 'docker-build-agent'
String envImageName      = 'node:16.18.1-bullseye-slim'
String subqueryToken     = 'subquery-token'
String targetEnvironment =  'invarch-tinker-fearless-wallet'
String jobList           =  ''
List   jobParams         = [
    string(defaultValue: targetEnvironment, name: 'targetEnvironment', trim: true),
    booleanParam(defaultValue: false, name: 'fullClean'),
    booleanParam(defaultValue: false, name: 'createProject'),
    booleanParam(defaultValue: false, name: 'stagingSlot'),
    booleanParam(defaultValue: false, name: 'prodSlot'),
    ]
String endpoint               = 'tinker.invarch.network'
String registry               = 'docker.soramitsu.co.jp'
String dockerBuildToolsUserId = 'bot-build-tools-ro'
Boolean disableSecretScanner  = false
String secretScannerExclusion = '.*project.yaml'

properties([
    parameters( jobParams ),
    pipelineTriggers([upstream( jobList )])
])

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        timestamps()
        disableConcurrentBuilds()
    }

    agent {
        label agentLabel
    }

    environment {
        SUBQUERY_CLI_VERSION = '1.10.1'
        SUBQUERY_INDEXER_VERSION = 'v1.17.1'
        SUBQUERY_NODE_VERSION = 'v1.10.1'
        SUBQUERY_CLI_VERSION_STAGING = '1.10.1'
        SUBQUERY_INDEXER_VERSION_STAGING = 'v1.17.1'
        SUBQUERY_NODE_VERSION_STAGING = 'v1.10.1'
        SUBQUERY_ORG =  'soramitsu'
        SUBQUERY_PROJECT_DB = 'sora'
        matrix_chain = "${targetEnvironment}"
        SUBQL_ACCESS_TOKEN = credentials("${subqueryToken}")
    }

    stages {
        stage('Secret scanner') {
            steps {
                script {
                    docker.withRegistry('https://' + registry, dockerBuildToolsUserId) {
                        secretScanner(disableSecretScanner, secretScannerExclusion)
                    }
                }
            }
        }
        stage('Validation before deployment') {
            steps {
                script {
                    docker.image("${envImageName}").inside() {
                        sh """
                            npm install -g @subql/cli@${SUBQUERY_CLI_VERSION}
                            subql validate
                        """
                    }
                }
            }
        }
        stage('Deleting a project if needed') {
            when {
                expression {params.fullClean}
            }
            steps {
                script {
                    docker.image("${envImageName}").inside() {
                        sh """
                            npm install -g @subql/cli@${SUBQUERY_CLI_VERSION}
                            subql project:delete-project \
                            --org=${SUBQUERY_ORG} \
                            --projectName=${matrix_chain}
                            echo project ${matrix_chain} is deleted
                        """
                    }
                }
            }
        }
        stage('Creating a project if needed') {
            when { anyOf {
                expression {params.fullClean}
                expression {params.createProject}
                }
            }
            steps {
                script {
                    docker.image("${envImageName}").inside() {
                        sh """
                            npm install -g @subql/cli@${SUBQUERY_CLI_VERSION}
                            subql project:create-project \
                            --org=${SUBQUERY_ORG} \
                            --projectName=${matrix_chain} \
                            --dedicatedDB=${SUBQUERY_PROJECT_DB} \
                            --gitRepo=https://github.com/soramitsu/fearless-subquery
                            echo project ${matrix_chain} is created
                        """
                    }
                }
            }
        }
        stage('Install Dependencies & Deploy in production slot') {
            when {
                expression {params.prodSlot}
            }
            steps {
                script {
                    docker.image("${envImageName}").inside() {
                        sh """
                            npm install -g @subql/cli@${SUBQUERY_CLI_VERSION}
                            apt-get update && apt-get install curl -y
                            yarn
                            subql codegen
                            RESULT=\$(subql publish -f project.yaml  | grep -oP ': \\K.*')
                            subql deployment:deploy \
                            --indexerVersion=${SUBQUERY_INDEXER_VERSION} \
                            --queryVersion=${SUBQUERY_NODE_VERSION} \
                            --org=${SUBQUERY_ORG} \
                            --disableHistorical \
                            --useDefaults \
                            --ipfsCID=\$RESULT \
                            --endpoint=wss://${endpoint} \
                            --projectName=${matrix_chain}
                            echo "New deployment in production slot is executed"
                        """
                    }
                }
            }
        }
        stage('Install Dependencies & Deploy in staging slot') {
            when {
                expression {params.stagingSlot}
            }
            steps {
                script {
                    docker.image("${envImageName}").inside() {
                        sh """
                            npm install -g @subql/cli@${SUBQUERY_CLI_VERSION}
                            apt-get update && apt-get install curl -y
                            yarn
                            subql codegen
                            RESULT=\$(subql publish -f project.yaml  | grep -oP ': \\K.*')
                            subql deployment:deploy \
                            --indexerVersion=${SUBQUERY_INDEXER_VERSION} \
                            --queryVersion=${SUBQUERY_NODE_VERSION} \
                            --org=${SUBQUERY_ORG} \
                            --disableHistorical \
                            --useDefaults \
                            --ipfsCID=\$RESULT \
                            --endpoint=wss://${endpoint} \
                            --projectName=${matrix_chain} \
                            --type=stage
                            echo "New deployment in staging slot is executed"
                        """
                    }
                }
            }
        }
    }
    post {
        cleanup { cleanWs() }
    }
}